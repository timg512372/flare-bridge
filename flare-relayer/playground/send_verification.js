const axios = require("axios");

const rawAttestationRequest = {
  attestationType:
    "0x45564d5472616e73616374696f6e000000000000000000000000000000000000",
  sourceId:
    "0x7465737445544800000000000000000000000000000000000000000000000000",
  requestBody: {
    transactionHash:
      "0x4ba5982d7f7a05def3b0cba19a61529fc731b0281262f1ae4b0bffefd0537750",
    requiredConfirmations: "0",
    provideInput: true,
    listEvents: true,
    logIndices: [],
  },
};

console.log("Request:", rawAttestationRequest);

const VERIFICATION_ENDPOINT =
  "https://evm-verifier.flare.network/verifier/eth/EVMTransaction/prepareRequest";

async function request() {
  try {
    const { data, status } = await axios.post(
      VERIFICATION_ENDPOINT,
      rawAttestationRequest,
      {
        headers: {
          "Content-Type": "application/json",
          "X-API-KEY": 123456,
        },
      }
    );
    console.log(data);
    console.log(status);
  } catch (error) {
    console.log(error);
  }
}

request();

response = {
  status: "VALID",
  abiEncodedRequest:
    "0x45564d5472616e73616374696f6e0000000000000000000000000000000000007465737445544800000000000000000000000000000000000000000000000000f94496936a5c05adfe050b73f7201c43e825fd7f3093bea28111216e282ffe7b00000000000000000000000000000000000000000000000000000000000000208dd88f83536dd2bb5b92addd69bd514c6cd18ba1bc7b8be1abed9359fdd59d3800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000",
};

response2 = {
  status: "OK",
  data: {
    roundId: 821724,
    hash: "0x8c34d7cef580f2082aaa35e21a71517ce41fdfdaa45ed8cb4596b5b1c6a3f076",
    requestBytes:
      "0x45564d5472616e73616374696f6e0000000000000000000000000000000000007465737445544800000000000000000000000000000000000000000000000000f94496936a5c05adfe050b73f7201c43e825fd7f3093bea28111216e282ffe7b00000000000000000000000000000000000000000000000000000000000000208dd88f83536dd2bb5b92addd69bd514c6cd18ba1bc7b8be1abed9359fdd59d3800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000",
    request: {
      attestationType:
        "0x45564d5472616e73616374696f6e000000000000000000000000000000000000",
      messageIntegrityCode:
        "0xf94496936a5c05adfe050b73f7201c43e825fd7f3093bea28111216e282ffe7b",
      requestBody: [Object],
      sourceId:
        "0x7465737445544800000000000000000000000000000000000000000000000000",
    },
    response: {
      attestationType:
        "0x45564d5472616e73616374696f6e000000000000000000000000000000000000",
      lowestUsedTimestamp: "1710025608",
      requestBody: [Object],
      responseBody: [Object],
      sourceId:
        "0x7465737445544800000000000000000000000000000000000000000000000000",
      votingRound: "821724",
    },
    merkleProof: [
      "0x7bd88161fc04f315a7e7c82f1bf93afa13f90b83c6ad55d031602fc4972ae93b",
      "0x571461cf2579bebce75d4b8fde14b11f96c84bec30ac6496ddc3d336c47f0f9e",
      "0xd794c67034e802db630c3f15c6302080a5e6ea8e4a1b9fa089ba0f92c633750d",
    ],
  },
};
